# -*- coding: utf-8 -*-
"""gerrymandering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I9iBXec23vA-MA21dyNg2mJve6UNTOlG
"""

precints, district = map(int,input().split())
dictionary = {}
total_sum = 0.0
for  i in range(precints):
  a,b,c=map(int,input().split())
  total_sum +=b+c
  if a in dictionary:
    dictionary[a].append((b,c))
  else:
    dictionary[a] = [(b,c)]



val = list(a for a in dictionary)
val.sort()
waste_A_T = 0
waste_B_T = 0
for a in val:
  part_a = 0
  part_b = 0
  work  = (dictionary.get(a))
  for i in range(len (work)):
    part_a += work[i][0]
    part_b += work[i][1]
  win_need = int((part_a+part_b)/2) + 1
  # print(int(win_need))
  # print(part_a)
  # print(part_b)
  if (part_a-part_b)>0:
    waste_A = (part_a - win_need)
    waste_A_T += waste_A
    waste_B_T +=part_b
    print("A", " ", waste_A, " ",part_b)
  else:
    waste_B = part_b -win_need
    waste_B_T += waste_B
    waste_A_T +=part_a
    print("B", " ",part_a, " ",waste_B)
print(abs(waste_A_T- waste_B_T)/total_sum)

